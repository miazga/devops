name: Docker Image Continuous Deployment

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push Web
        uses: docker/build-push-action@v4
        with:
          context: .
          file: src/WebUI/Dockerfile
          push: true
          tags: outloud/web:latest
      -
        name: Build and push Worker
        uses: docker/build-push-action@v4
        with:
          context: .
          file: src/Worker/Dockerfile
          push: true
          tags: outloud/worker:latest
      -
        name: Copy docker-compose.yml, docker-compose.proxy.yml and run.sh
        id: compose
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          source: "docker-compose.yml,docker-compose.proxy.yml,run.sh"
          target: /app
      - 
        name: Run the latest Container
        uses: appleboy/ssh-action@v0.1.8
        env:
          WEB_IMAGE: outloud/web:latest
          WORKER_IMAGE: outloud/worker:latest
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            if [[ ! -e /app/.ignore ]]; then
              mkdir -p /app
              touch /app/.ignore 
            fi
            cd /app 
            docker-compose down
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            web_images=$(docker ps -a -q --filter ancestor=${{ env.WEB_IMAGE }} --format="{{.ID}}")
            if [[ $web_images != 0 ]]; then
              docker rm $(docker stop $web_images)
            fi
            worker_images=$(docker ps -a -q --filter ancestor=${{ env.WORKER_IMAGE }} --format="{{.ID}}")
            if [[ $worker_images != 0 ]]; then
              docker rm $(docker stop $worker_images)
            fi
            docker image prune -a
            docker pull ${{ env.WEB_IMAGE }}
            docker pull ${{ env.WORKER_IMAGE }}
            ./run.sh ${{ secrets.DOMAIN }}
